unit CRUD.Entidades.Produtos;

interface

uses
  CRUD.Interfaces.Produtos,
  CRUD.Interfaces.Conexao, 
  Data.DB, CRUD.Interfaces.IdNome;

type
  TProdutos = class(TInterfacedObject, iProdutos, iPesquisaQuery)
  private
    FIdNome : iIdNome<iProdutos>;
    FQuery: iQuery;
    FPreco: double;
    FDataCadastro: TdateTime;
    FDescricao: string;
    function Id(aValue: string): iProdutos;
    function Nome: string;
  public
    constructor Create;
    destructor Destroy; override;
    class function New: iProdutos;
    function Preco(aValue: double): iProdutos; overload;
    function Preco: double; overload;
    function DataCadastro(aValue: TdateTime): iProdutos; overload;
    function DataCadastro: TdateTime; overload;
    function Descricao(aValue: string): iProdutos; overload;
    function Descricao: string; overload;
    function Pesquisa : iPesquisaQuery;
    function IdNome : iIdNome<iProdutos>; 

    function Todos: iPesquisaQuery;
    function Registro(Field: String; aValue: string): iPesquisaQuery;
    function Codigo(Field: String; aValue: string): iPesquisaQuery;
    function DataSet(DataSource: TDataSource): iPesquisaQuery;
    function FDQuery: iQuery;
  end;

implementation

uses
  CRUD.Controller.FactoryQuery, 
  System.SysUtils, CRUD.Entidades.IdNome;

function TProdutos.Codigo(Field, aValue: string): iPesquisaQuery;
begin
  result := self;
  FQuery.Close
         .Clear  
          .SQL(' SELECT * FROM PRODUTOS ')
           .Whereid(Field, aValue)
            .Active
end;


constructor TProdutos.Create;
begin
  FQuery := TControllerFactoryQuery.New.Query(nil);
  FIdNome := TIdNome<iProdutos>.New(self)
end;

function TProdutos.DataCadastro: TdateTime;
begin
  result := FDataCadastro;
end;

function TProdutos.DataSet(DataSource: TDataSource): iPesquisaQuery;
begin
  result := self;
  DataSource.DataSet := FQuery.DataSet;
end;

function TProdutos.DataCadastro(aValue: TdateTime): iProdutos;
begin
  result := self;
  FDataCadastro := aValue;
end;

function TProdutos.Descricao: string;
begin
  result := FDescricao;
end;

destructor TProdutos.Destroy;
begin
  inherited;

end;

function TProdutos.FDQuery: iQuery;
begin
  result := FQuery;
end;

function TProdutos.Descricao(aValue: string): iProdutos;
begin
  result := self;
  FDescricao := aValue;
end;

function TProdutos.IdNome: iIdNome<iProdutos>;
begin
  result := FIdNome;
end;

class function TProdutos.New: iProdutos;
begin
  result := self.Create;
end;

function TProdutos.Pesquisa: iPesquisaQuery;
begin
  result := self;
end;

function TProdutos.Preco: double;
begin
  result := FPreco;
end;

function TProdutos.Registro(Field, aValue: string): iPesquisaQuery;
begin
  result := self;
    FQuery.Close
           .Clear
            .SQL(' SELECT * FROM PRODUTOS ')
             .Where(Field, aValue)
              .Active;
end;

function TProdutos.Todos: iPesquisaQuery;
begin
 result := self;
 FQuery.Close.Clear.SQL(' SELECT * FROM PRODUTOS ').Active;
end;

function TProdutos.Preco(aValue: double): iProdutos;
begin
  result := self;
  FPreco := aValue;
end;

end.
